"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var AssetsSource_1 = require("./AssetsSource");
var stringUtils = require("../util/strings");
var URI_1 = require("../util/URI");
var assetRegisterTmpl = "@include asset-register(${namespace}, ${name}, ${sourcePath}, ${uri});\n";
var AssetsCollection = /** @class */ (function () {
    function AssetsCollection(options) {
        this.options = options;
        this.sass = options.eyeglass.engines.sass;
        this.sources = [];
    }
    /**
      * adds an AssetsSource to the collection
      * @param    {String} src - the source directory of the assets
      * @param    {Object} opts - the options to pass @see AssetsSource
      * @returns  {AssetsCollection} returns the instance of AssetsCollection for chaining
      */
    AssetsCollection.prototype.addSource = function (src, opts) {
        this.sources.push(new AssetsSource_1.default(src, opts));
        return this;
    };
    /**
      * returns the scss to register all the assets
      * @param    {String} name - the namespace to use
      * @returns  {String} the scss representation of the asset registration
      */
    AssetsCollection.prototype.asAssetImport = function (name) {
        var _this = this;
        // builds the scss to register all the assets
        // this will look something like...
        //  @import "eyeglass/assets";
        //  @include asset-register(
        //    "namespace",
        //    "path/to/foo.png",
        //    "/absolute/namespace/path/to/foo.png",
        //    "namespace/path/to/foo.png"
        //  );
        return this.sources.reduce(function (importStr, source) {
            // get the assets for the entry
            var assets = source.getAssets(name);
            var namespace = (stringUtils.quoteJS(_this.sass, assets.namespace) || "null");
            // reduce the assets into a `asset-register` calls
            return importStr + assets.files.reduce(function (registerStr, asset) {
                return registerStr + stringUtils.tmpl(_this.sass, assetRegisterTmpl, {
                    namespace: namespace,
                    name: URI_1.URI.sass(_this.sass, asset.name),
                    sourcePath: URI_1.URI.sass(_this.sass, asset.sourcePath),
                    uri: URI_1.URI.sass(_this.sass, asset.uri)
                });
            }, "");
        }, '@import "eyeglass/assets";\n');
    };
    /**
      * Build a string suitable for caching an instance of this
      * @returns {String} the cache key
      */
    AssetsCollection.prototype.cacheKey = function (name) {
        return this.sources.map(function (source) {
            return source.cacheKey(name);
        }).sort().join("\x00");
    };
    return AssetsCollection;
}());
exports.default = AssetsCollection;
//# sourceMappingURL=AssetsCollection.js.map