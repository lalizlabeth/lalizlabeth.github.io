import * as glob from "glob";
import { AssetSourceOptions } from "../util/Options";
export interface DiscoveredAssets {
    namespace: string | undefined;
    files: Array<{
        name: string;
        sourcePath: string;
        uri: string;
    }>;
}
declare class AssetsSource {
    name: string | null;
    httpPrefix: string | null;
    srcPath: string;
    pattern: string;
    globOpts: glob.IOptions;
    constructor(srcPath: string, options?: Partial<AssetSourceOptions>);
    /**
      * returns any assets found in the given source
      * @param    {String} namespace - the namespace
      * @returns  {Object} the object containing the namespace and array of discovered files
      */
    getAssets(namespace: string | undefined): DiscoveredAssets;
    /**
      * returns a string representation of the source pattern
      * @returns {string} the source pattern
      */
    toString(): string;
    /**
      * Build a string suitable for caching an instance of this
      * @returns {String} the cache key
      */
    cacheKey(namespace: string): string;
}
export default AssetsSource;
//# sourceMappingURL=AssetsSource.d.ts.map