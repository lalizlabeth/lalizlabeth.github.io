"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var fs_1 = require("fs");
var path = require("path");
var URI_1 = require("./URI");
var PACKAGE_JSON = "package.json";
function getPackageData(pkgPath) {
    try {
        return require(pkgPath);
    }
    catch (e) {
        /* istanbul ignore next - not really worth writing a test for */
        return null;
    }
}
exports.getPackageData = getPackageData;
function getPackage(dir) {
    var pkgPath = getPackagePath(dir);
    return {
        path: pkgPath,
        data: getPackageData(pkgPath)
    };
}
exports.getPackage = getPackage;
function getPackagePath(dir) {
    dir = URI_1.URI.system(dir);
    return (path.basename(dir) === PACKAGE_JSON) ? dir : path.join(dir, PACKAGE_JSON);
}
exports.getPackagePath = getPackagePath;
function findNearestPackage(dir) {
    var originalDir = dir;
    dir = URI_1.URI.system(dir);
    var prevDir;
    while (dir !== prevDir) {
        if (fs_1.existsSync(getPackagePath(dir))) {
            return dir;
        }
        prevDir = dir;
        dir = path.dirname(dir);
    }
    /* istanbul ignore next - should never happen and not possible to test */
    throw new Error("No package.json file found in directory " + originalDir + " or in any of the parent directories.");
}
exports.findNearestPackage = findNearestPackage;
//# sourceMappingURL=package.js.map