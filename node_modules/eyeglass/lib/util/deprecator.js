"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var semver = require("semver");
var DEFAULT_VERSION = "0.0.0";
var Deprecator = /** @class */ (function () {
    function Deprecator(options) {
        this.ignoreDeprecations = options && options.eyeglass && options.eyeglass.ignoreDeprecations;
    }
    Deprecator.prototype.isEnabled = function (sinceVersion) {
        // if `enabled` is undefined, try to set it
        if (this.enabled === undefined) {
            // if `disableDeprecations`, we fallback to the env variable
            if (this.ignoreDeprecations === undefined) {
                // return early and don't set `enabled`, as we'll check the env every time
                // TODO: Ask eugene why we need to worry about the env variable changing.
                return !semver.lte(sinceVersion, process.env.EYEGLASS_DEPRECATIONS || DEFAULT_VERSION);
            }
            this.enabled = !semver.lte(sinceVersion, this.ignoreDeprecations || DEFAULT_VERSION);
        }
        return this.enabled;
    };
    Deprecator.prototype.deprecate = function (sinceVersion, removeVersion, message) {
        if (this.isEnabled(sinceVersion)) {
            // eslint-disable-next-line no-console
            console.warn("[eyeglass:deprecation]", "(deprecated in " + sinceVersion + ", will be removed in " + removeVersion + ")", message);
        }
    };
    return Deprecator;
}());
exports.Deprecator = Deprecator;
var factory = function (options) {
    var deprecator = new Deprecator(options);
    return deprecator.deprecate.bind(deprecator);
};
exports.default = factory;
//# sourceMappingURL=deprecator.js.map