"use strict";
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __spread = (this && this.__spread) || function () {
    for (var ar = [], i = 0; i < arguments.length; i++) ar = ar.concat(__read(arguments[i]));
    return ar;
};
Object.defineProperty(exports, "__esModule", { value: true });
var path = require("path");
var SassImplementation_1 = require("./SassImplementation");
var URI_1 = require("./URI");
var merge = require("lodash.merge");
exports.DEFAULT_EYEGLASS_COMPAT = "^2.0";
/* eslint-disable-next-line no-unused-vars */
var default_1 = /** @class */ (function () {
    function default_1() {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        var config = getSassOptions.apply(void 0, __spread(args));
        this.eyeglass = config.eyeglass; // this makes the compiler happy.
        merge(this, config);
    }
    return default_1;
}());
exports.default = default_1;
function eyeglassOptionsFromNodeSassArg(arg, deprecate) {
    if (SassImplementation_1.isSassImplementation(arg)) {
        // throw a deprecation warning
        deprecate("0.8.0", "0.9.0", [
            "You should no longer pass `sass` directly to Eyeglass. Instead pass it as an option:",
            "var options = eyeglass({",
            "  /* sassOptions */",
            "  ...",
            "  eyeglass: {",
            "    engines: {",
            "      sass: require('node-sass')",
            "    }",
            "  }",
            "});"
        ].join("\n  "));
        // and convert it the correct format
        return {
            engines: {
                sass: arg
            }
        };
    }
}
function includePathsFromEnv() {
    return normalizeIncludePaths(process.env.SASS_PATH, process.cwd());
}
function migrateEyeglassOptionsFromSassOptions(sassOptions, eyeglassOptions, deprecate) {
    // migrates the following properties from sassOptions to eyeglassOptions
    var toMigrate = ["root", "cacheDir", "buildDir", "httpRoot", "strictModuleVersions"];
    toMigrate.forEach(function (option) {
        if (eyeglassOptions[option] === undefined && sassOptions[option] !== undefined) {
            deprecate("0.8.0", "0.9.0", [
                "`" + option + "` should be passed into the eyeglass options rather than the sass options:",
                "var options = eyeglass({",
                "  /* sassOptions */",
                "  ...",
                "  eyeglass: {",
                "    " + option + ": ...",
                "  }",
                "});"
            ].join("\n  "));
            eyeglassOptions[option] = sassOptions[option];
            delete sassOptions[option];
        }
    });
}
function migrateAssetOption(sassOptions, eyeglassOptions, deprecate, fromOption, toOption) {
    if ((eyeglassOptions.assets === undefined ||
        (eyeglassOptions.assets && eyeglassOptions.assets[toOption] === undefined)) &&
        sassOptions[fromOption] !== undefined) {
        deprecate("0.8.0", "0.9.0", [
            "`" + fromOption + "` has been renamed to `" + toOption + "` and should be passed into the eyeglass asset options rather than the sass options:",
            "var options = eyeglass({",
            "  /* sassOptions */",
            "  ...",
            "  eyeglass: {",
            "    assets: {",
            "      " + toOption + ": ...",
            "    }",
            "  }",
            "});"
        ].join("\n  "));
        if (eyeglassOptions.assets === undefined) {
            eyeglassOptions.assets = {};
        }
        eyeglassOptions.assets[toOption] = sassOptions[fromOption];
        delete sassOptions[fromOption];
    }
}
function migrateAssetOptionsFromSassOptions(sassOptions, eyeglassOptions, deprecate) {
    // migrates the following properties from sassOptions to eyeglassOptions
    migrateAssetOption(sassOptions, eyeglassOptions, deprecate, "assetsHttpPrefix", "httpPrefix");
    migrateAssetOption(sassOptions, eyeglassOptions, deprecate, "assetsRelativeTo", "relativeTo");
}
function defaultSassOptions(options) {
    defaultValue(options, "includePaths", function () { return includePathsFromEnv(); });
    return options;
}
function resolveConfig(options) {
    // default root dir
    defaultValue(options, "root", function () { return process.cwd(); });
    // default cache dir
    defaultValue(options, "cacheDir", function () { return path.join(options.root, ".eyeglass_cache"); });
    // default engines
    defaultValue(options, "engines", function () { return {}; });
    defaultValue(options.engines, "sass", function () { return require("node-sass"); });
    // default assets
    defaultValue(options, "assets", function () { return {}; });
    // default httpRoot
    defaultValue(options, "httpRoot", function () { return "/"; });
    // default enableImportOnce
    defaultValue(options, "enableImportOnce", function () { return true; });
    // use global module caching by default
    defaultValue(options, "useGlobalModuleCache", function () { return true; });
    // There's no eyeglass module API changes in eyeglass 2.x so we default to silencing these warnings.
    defaultValue(options, "assertEyeglassCompatibility", function () { return exports.DEFAULT_EYEGLASS_COMPAT; });
    options.fsSandbox = normalizeFsSandbox(options.fsSandbox, options.root);
    return options;
}
exports.resolveConfig = resolveConfig;
function normalizeFsSandbox(sandboxOption, root) {
    var fsSandbox;
    if (typeof sandboxOption === "undefined") {
        // default to no fs access
        fsSandbox = [];
    }
    else if (sandboxOption === true) {
        // support simple enabling of the sandbox.
        fsSandbox = [root];
    }
    else if (typeof sandboxOption === "string") {
        // support simple strings instead of requiring a list for even a single dir.
        fsSandbox = [sandboxOption];
    }
    else {
        fsSandbox = sandboxOption;
    }
    return fsSandbox;
}
function normalizeIncludePaths(includePaths, baseDir) {
    if (!includePaths) {
        return [];
    }
    // in some cases includePaths is a path delimited string
    if (typeof includePaths === "string") {
        includePaths = includePaths.split(path.delimiter);
    }
    // filter out empty paths
    includePaths = includePaths.filter(function (dir) { return !!dir; });
    // make all relative include paths absolute
    return includePaths.map(function (dir) { return path.resolve(baseDir, URI_1.URI.system(dir)); });
}
function normalizeSassOptions(sassOptions, eyeglassOptions) {
    sassOptions.includePaths = normalizeIncludePaths(sassOptions.includePaths, eyeglassOptions.root);
    return Object.assign(sassOptions, { eyeglass: eyeglassOptions });
}
var DEPRECATED_OPTIONS = new Set([
    "root",
    "httpRoot",
    "cacheDir",
    "buildDir",
    "strictModuleVersions",
    "assetsHttpPrefix",
    "assetsRelativeTo",
]);
function hasDeprecatedOptions(options) {
    for (var key in options) {
        if (DEPRECATED_OPTIONS.has(key)) {
            return true;
        }
    }
    return false;
}
function getSassOptions(options, deprecate, sassArg) {
    var sassOptions = options || {};
    // we used to support passing `node-sass` as the second argument to eyeglass,
    //  this should now be an options object
    // if the eyeglassOptions looks like node-sass, convert it into an object
    // this can be removed when we fully deprecate this support
    var eyeglassOptions = merge({}, eyeglassOptionsFromNodeSassArg(sassArg, deprecate));
    merge(eyeglassOptions, sassOptions.eyeglass);
    // determine whether or not we should normalize URI path separators
    // @see URI
    if (eyeglassOptions.normalizePaths !== undefined) {
        // TODO: make the code read the config from options which is defaulted from the env var
        process.env.EYEGLASS_NORMALIZE_PATHS = "" + eyeglassOptions.normalizePaths;
    }
    if (hasDeprecatedOptions(sassOptions)) {
        // migrate eyeglassOptions off of the sassOptions
        migrateEyeglassOptionsFromSassOptions(sassOptions, eyeglassOptions, deprecate);
        migrateAssetOptionsFromSassOptions(sassOptions, eyeglassOptions, deprecate);
    }
    defaultSassOptions(sassOptions);
    resolveConfig(eyeglassOptions);
    return normalizeSassOptions(sassOptions, resolveConfig(eyeglassOptions));
}
function defaultValue(obj, key, value) {
    if (obj[key] === undefined) {
        obj[key] = value();
    }
}
//# sourceMappingURL=Options.js.map