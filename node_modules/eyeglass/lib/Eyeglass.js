"use strict";
var __values = (this && this.__values) || function (o) {
    var m = typeof Symbol === "function" && o[Symbol.iterator], i = 0;
    if (m) return m.call(o);
    return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
};
Object.defineProperty(exports, "__esModule", { value: true });
var EyeglassModules_1 = require("./modules/EyeglassModules");
var ModuleFunctions_1 = require("./modules/ModuleFunctions");
var ModuleImporter_1 = require("./importers/ModuleImporter");
var AssetImporter_1 = require("./importers/AssetImporter");
var FSImporter_1 = require("./importers/FSImporter");
var Options_1 = require("./util/Options");
var Assets_1 = require("./assets/Assets");
var deprecator_1 = require("./util/deprecator");
var semverChecker_1 = require("./util/semverChecker");
var fs = require("fs-extra");
var SassImplementation_1 = require("./util/SassImplementation");
// eslint-disable-next-line @typescript-eslint/no-var-requires
var pkg = require("../package.json");
var Eyeglass = /** @class */ (function () {
    function Eyeglass(options, deprecatedNodeSassArg) {
        var e_1, _a;
        // an interface for deprecation warnings
        this.deprecate = deprecator_1.default(options);
        this.options = new Options_1.default(options, this.deprecate, deprecatedNodeSassArg);
        this.assets = new Assets_1.default(this, this.options.eyeglass.engines.sass);
        this.modules = new EyeglassModules_1.default(this.options.eyeglass.root, this.options, this.options.eyeglass.modules);
        fs.mkdirpSync(this.options.eyeglass.cacheDir);
        semverChecker_1.default(this, this.options.eyeglass.engines.sass, this.options.eyeglass, Eyeglass.VERSION);
        checkMissingDependencies.call(this);
        // initialize all the modules
        this.modules.init(this, this.options.eyeglass.engines.sass);
        // add importers and functions
        addImporters.call(this);
        addFunctions.call(this);
        // deprecated stuff
        deprecateProperties.call(this, ["enableImportOnce"]);
        // auto-add asset paths specified via options
        if (this.options.eyeglass.assets.sources) {
            try {
                for (var _b = __values(this.options.eyeglass.assets.sources), _c = _b.next(); !_c.done; _c = _b.next()) {
                    var assetSource = _c.value;
                    this.assets.addSource(assetSource.directory, assetSource);
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                }
                finally { if (e_1) throw e_1.error; }
            }
        }
    }
    // export deprecated interfaces for back-compat
    Eyeglass.prototype.sassOptions = function () {
        this.deprecate("0.8.0", "0.9.0", "#sassOptions() is deprecated. Instead, you should access the sass options on #options");
        return this.options;
    };
    Eyeglass.helpers = function (sass) {
        return SassImplementation_1.helpers(sass);
    };
    Eyeglass.VERSION = pkg.version;
    return Eyeglass;
}());
exports.default = Eyeglass;
function checkMissingDependencies() {
    var missing = this.modules.issues.dependencies.missing;
    if (missing.length) {
        var warning = ["The following dependencies were not found:"];
        warning.push.apply(warning, missing.map(function (dep) {
            return "  " + dep;
        }));
        warning.push("You might need to `npm install` the above.");
        // eslint-disable-next-line no-console
        console.warn(warning.join("\n"));
    }
}
function addImporters() {
    var fsImporter = FSImporter_1.default(this, this.options.eyeglass.engines.sass, this.options, this.options.importer);
    var assetImporter = AssetImporter_1.default(this, this.options.eyeglass.engines.sass, this.options, fsImporter);
    this.options.importer = ModuleImporter_1.default(this, this.options.eyeglass.engines.sass, this.options, assetImporter);
}
function addFunctions() {
    this.options.functions = ModuleFunctions_1.default(this, this.options.eyeglass.engines.sass, this.options, this.options.functions // The type of @types/node-sass/Options["functions"] is bad.
    );
}
function deprecateProperties(properties) {
    var e_2, _a;
    var _loop_1 = function (prop) {
        Object.defineProperty(this_1, prop, {
            get: function () {
                this.deprecate("0.8.0", "0.9.0", "The property `" + prop + "` should no longer be accessed directly on eyeglass. " +
                    "Instead, you'll find the value on `eyeglass.options.eyeglass." + prop + "`");
                return this.options.eyeglass[prop];
            },
            set: function (value) {
                this.deprecate("0.8.0", "0.9.0", "The property `" + prop + "` should no longer be set directly on eyeglass. " +
                    "Instead, you should pass this as an option to eyeglass:" +
                    "\n  var options = eyeglass({" +
                    "\n    /* sassOptions */" +
                    "\n    ..." +
                    "\n    eyeglass: {" +
                    "\n      " + prop + ": ..." +
                    "\n    }" +
                    "\n  });");
                this.options.eyeglass[prop] = value;
            }
        });
    };
    var this_1 = this;
    try {
        for (var properties_1 = __values(properties), properties_1_1 = properties_1.next(); !properties_1_1.done; properties_1_1 = properties_1.next()) {
            var prop = properties_1_1.value;
            _loop_1(prop);
        }
    }
    catch (e_2_1) { e_2 = { error: e_2_1 }; }
    finally {
        try {
            if (properties_1_1 && !properties_1_1.done && (_a = properties_1.return)) _a.call(properties_1);
        }
        finally { if (e_2) throw e_2.error; }
    }
}
//# sourceMappingURL=Eyeglass.js.map